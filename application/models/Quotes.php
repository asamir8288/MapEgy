<?php

/**
 * Quotes
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Quotes extends BaseQuotes
{
    public function addQuote(array $data) {
        $errors = $this->__validateQuote($data);
        if ($errors['error_flag']) {
            return $errors;
        } else {
            $is_active = false;
            if (isset($data['is_active'])) {
                $is_active = true;
            }
            $set_at_homepage = false;
            if (isset($data['set_at_homepage'])) {
                $set_at_homepage = true;
            }
            $b = new Quotes();
            $b->description = $data['description'];
            $b->author = $data['author'];
            $b->logo = $errors['news_image'];
            $b->title = $data['title'];
            $b->is_active = $is_active;
            $b->set_at_homepage = $set_at_homepage;
            $b->created_at = date('ymdHis');
            $b->save();

            return $errors;
        }
    }

    public function updateQuote(array $data) {
        $errors = $this->__validateQuote($data);
        if ($errors['error_flag']) {
            return $errors;
        } else {
            $is_active = false;
            if (isset($data['is_active'])) {
                $is_active = true;
            }
            $set_at_homepage = false;
            if (isset($data['set_at_homepage'])) {
                $set_at_homepage = true;
            }

            Doctrine_Query::create()
                    ->update('Quotes b')
                    ->set('b.description', '?', $data['description'])
                    ->set('b.author', '?', $data['author'])
                    ->set('b.logo', '?', $errors['news_image'])
                    ->set('b.is_active', '?', $is_active)
                    ->set('b.set_at_homepage', '?', $set_at_homepage)
                    ->set('b.updated_at', '?', date('ymdHis'))
                    ->where('b.id =?', $data['id'])
                    ->execute();

            return $errors;
        }
    }

    public function deleteQuote($quote_id) {
        Doctrine_Query::create()
                ->update('Quotes b')
                ->set('b.deleted', '?', TRUE)
                ->where('b.id =?', $quote_id)
                ->execute();
    }

    private function __validateQuote($quotes_data) {
        $errors = array();
        $error_flag = false;
        if (!required($quotes_data['description'])) {
            $errors['description'] = 'Please write in brief';
            $error_flag = true;
        }
        if (!required($quotes_data['author'])) {
            $errors['author'] = 'Please write in author';
            $error_flag = true;
        }

        if (!$error_flag && (isset($_FILES['userfile']) && !empty($_FILES['userfile']['name']))) {
            $upload_data = upload_file('quotes', array('jpg|png|jpeg|gif'), '2028');
            if ($upload_data['error_flag']) {
                $errors['image'] = $upload_data['errors'];
                $error_flag = true;
            } else {
                $errors['news_image'] = $upload_data['upload_data']['file_name'];
            }
        }else{
            $errors['news_image'] = $quotes_data['same_image'];
        }
        $errors['error_flag'] = $error_flag;

        return $errors;
    }
    
    public function quotes_sorting(array $data) {
        for ($i = 0; $i < count($data['order_flag']); $i++) {
            Doctrine_Query::create()
                    ->update('Quotes q')
                    ->set('q.order_flag', '?', $i)
                    ->where('q.id =?', $data['order_flag'][$i])
                    ->execute();
        }
    }
    
    public function activateDeactivateQuote($quote_id) {
        $currentQuotetatus = $this->getCurrentQuoteStatus($quote_id);
        $new_status = TRUE;
        if ($currentQuotetatus)
            $new_status = FALSE;

        Doctrine_Query::create()
                ->update('Quotes q')
                ->set('q.is_active', '?', $new_status)
                ->where('q.id =?', $quote_id)
                ->execute();
    }
    
    public function SetUnsetQuoteAtHomepage($quote_id) {
        $currentQuotetatus = $this->getCurrentQuoteHomepageStatus($quote_id);
        $new_status = TRUE;
        if ($currentQuotetatus)
            $new_status = FALSE;

        Doctrine_Query::create()
                ->update('Quotes q')
                ->set('q.set_at_homepage', '?', $new_status)
                ->where('q.id =?', $quote_id)
                ->execute();
    }

    private function getCurrentQuoteStatus($quote_id) {
        return Doctrine_Query::create()
                        ->select('q.is_active')
                        ->from('Quotes q')
                        ->where('q.id =?', $quote_id)
                        ->setHydrationMode(Doctrine::HYDRATE_SINGLE_SCALAR)
                        ->fetchOne();
    }

    private function getCurrentQuoteHomepageStatus($quote_id) {
        return Doctrine_Query::create()
                        ->select('q.set_at_homepage')
                        ->from('Quotes q')
                        ->where('q.id =?', $quote_id)
                        ->setHydrationMode(Doctrine::HYDRATE_SINGLE_SCALAR)
                        ->fetchOne();
    }
    
}